const mongoose = require('mongoose');

// Only define the schema if Message model doesn't exist
if (!mongoose.models.Message) {
    const messageSchema = new mongoose.Schema({
        chat: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Chat',
            required: true
        },
        sender: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User',
            required: true
        },
        content: {
            type: String,
            required: true,
            trim: true
        },
        readBy: [{
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        }],
        attachments: [{
            type: String,  // URL to stored file
            default: []
        }],
        messageType: {
            type: String,
            enum: ['text', 'image', 'file', 'system'],
            default: 'text'
        },
        metadata: {
            fileName: String,
            fileSize: Number,
            mimeType: String
        }
    }, {
        timestamps: true
    });

    // Indexes for better query performance
    messageSchema.index({ chat: 1, createdAt: -1 });
    messageSchema.index({ sender: 1 });

    // Virtual for checking if message is read
    messageSchema.virtual('isRead').get(function() {
        return this.readBy && this.readBy.length > 0;
    });

    // Pre-save middleware to handle any necessary transformations
    messageSchema.pre('save', function(next) {
        // Ensure content is trimmed
        if (this.content) {
            this.content = this.content.trim();
        }
        next();
    });

    // Method to mark message as read by a user
    messageSchema.methods.markAsRead = async function(userId) {
        if (!this.readBy.includes(userId)) {
            this.readBy.push(userId);
            await this.save();
        }
        return this;
    };

    // Create the model
    mongoose.model('Message', messageSchema);
}

// Export the existing or newly created model
module.exports = mongoose.models.Message;